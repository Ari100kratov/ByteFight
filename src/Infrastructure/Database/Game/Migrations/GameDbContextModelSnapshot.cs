// <auto-generated />
using System;
using Infrastructure.Database.Game;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Database.Game.Migrations
{
    [DbContext(typeof(GameDbContext))]
    partial class GameDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("game")
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Game.Arenas.Arena", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BackgroundAsset")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("background_asset");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("description");

                    b.PrimitiveCollection<int[]>("GameModes")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("game_modes");

                    b.Property<int>("GridHeight")
                        .HasColumnType("integer")
                        .HasColumnName("grid_height");

                    b.Property<int>("GridWidth")
                        .HasColumnType("integer")
                        .HasColumnName("grid_width");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_arenas");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_arenas_name");

                    b.ToTable("arenas", "game");
                });

            modelBuilder.Entity("Domain.Game.Arenas.ArenaEnemies.ArenaEnemy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ArenaId")
                        .HasColumnType("uuid")
                        .HasColumnName("arena_id");

                    b.Property<Guid>("EnemyId")
                        .HasColumnType("uuid")
                        .HasColumnName("enemy_id");

                    b.HasKey("Id")
                        .HasName("pk_arena_enemies");

                    b.HasIndex("ArenaId")
                        .HasDatabaseName("ix_arena_enemies_arena_id");

                    b.HasIndex("EnemyId")
                        .HasDatabaseName("ix_arena_enemies_enemy_id");

                    b.ToTable("arena_enemies", "game");
                });

            modelBuilder.Entity("Domain.Game.CharacterClasses.CharacterClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_character_classes");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_character_classes_name");

                    b.ToTable("character_classes", "game");
                });

            modelBuilder.Entity("Domain.Game.CharacterClasses.CharacterClassActionAsset", b =>
                {
                    b.Property<Guid>("CharacterClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("character_class_id");

                    b.Property<int>("ActionType")
                        .HasColumnType("integer")
                        .HasColumnName("action_type");

                    b.Property<int>("Variant")
                        .HasColumnType("integer")
                        .HasColumnName("variant");

                    b.HasKey("CharacterClassId", "ActionType", "Variant")
                        .HasName("pk_character_class_action_assets");

                    b.ToTable("character_class_action_assets", "game");
                });

            modelBuilder.Entity("Domain.Game.CharacterClasses.CharacterClassStat", b =>
                {
                    b.Property<Guid>("CharacterClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("character_class_id");

                    b.Property<int>("StatType")
                        .HasColumnType("integer")
                        .HasColumnName("stat_type");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("CharacterClassId", "StatType")
                        .HasName("pk_character_class_stats");

                    b.ToTable("character_class_stats", "game");
                });

            modelBuilder.Entity("Domain.Game.Characters.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("class_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_characters");

                    b.HasIndex("ClassId")
                        .HasDatabaseName("ix_characters_class_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_characters_name");

                    b.ToTable("characters", "game");
                });

            modelBuilder.Entity("Domain.Game.Characters.CharacterCodes.CharacterCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid")
                        .HasColumnName("character_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Language")
                        .HasColumnType("integer")
                        .HasColumnName("language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.Property<string>("SourceCode")
                        .HasColumnType("text")
                        .HasColumnName("source_code");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_character_codes");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("ix_character_codes_character_id");

                    b.ToTable("character_codes", "game");
                });

            modelBuilder.Entity("Domain.Game.Enemies.Enemy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_enemies");

                    b.ToTable("enemies", "game");
                });

            modelBuilder.Entity("Domain.Game.Enemies.EnemyActionAsset", b =>
                {
                    b.Property<Guid>("EnemyId")
                        .HasColumnType("uuid")
                        .HasColumnName("enemy_id");

                    b.Property<int>("ActionType")
                        .HasColumnType("integer")
                        .HasColumnName("action_type");

                    b.Property<int>("Variant")
                        .HasColumnType("integer")
                        .HasColumnName("variant");

                    b.HasKey("EnemyId", "ActionType", "Variant")
                        .HasName("pk_enemy_action_assets");

                    b.ToTable("enemy_action_assets", "game");
                });

            modelBuilder.Entity("Domain.Game.Enemies.EnemyStat", b =>
                {
                    b.Property<Guid>("EnemyId")
                        .HasColumnType("uuid")
                        .HasColumnName("enemy_id");

                    b.Property<int>("StatType")
                        .HasColumnType("integer")
                        .HasColumnName("stat_type");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("EnemyId", "StatType")
                        .HasName("pk_enemy_stats");

                    b.ToTable("enemy_stats", "game");
                });

            modelBuilder.Entity("Domain.Game.Arenas.ArenaEnemies.ArenaEnemy", b =>
                {
                    b.HasOne("Domain.Game.Arenas.Arena", "Arena")
                        .WithMany("Enemies")
                        .HasForeignKey("ArenaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_arena_enemies_arenas_arena_id");

                    b.HasOne("Domain.Game.Enemies.Enemy", "Enemy")
                        .WithMany()
                        .HasForeignKey("EnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_arena_enemies_enemies_enemy_id");

                    b.OwnsOne("Domain.Game.Arenas.ArenaEnemies.Position", "Position", b1 =>
                        {
                            b1.Property<Guid>("ArenaEnemyId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("X")
                                .HasColumnType("integer")
                                .HasColumnName("position_x");

                            b1.Property<int>("Y")
                                .HasColumnType("integer")
                                .HasColumnName("position_y");

                            b1.HasKey("ArenaEnemyId");

                            b1.ToTable("arena_enemies", "game");

                            b1.WithOwner()
                                .HasForeignKey("ArenaEnemyId")
                                .HasConstraintName("fk_arena_enemies_arena_enemies_id");
                        });

                    b.Navigation("Arena");

                    b.Navigation("Enemy");

                    b.Navigation("Position")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Game.CharacterClasses.CharacterClassActionAsset", b =>
                {
                    b.HasOne("Domain.Game.CharacterClasses.CharacterClass", "CharacterClass")
                        .WithMany("ActionAssets")
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_character_class_action_assets_character_classes_character_c");

                    b.OwnsOne("Domain.ValueObjects.SpriteAnimation", "Animation", b1 =>
                        {
                            b1.Property<Guid>("CharacterClassActionAssetCharacterClassId")
                                .HasColumnType("uuid")
                                .HasColumnName("character_class_id");

                            b1.Property<int>("CharacterClassActionAssetActionType")
                                .HasColumnType("integer")
                                .HasColumnName("action_type");

                            b1.Property<int>("CharacterClassActionAssetVariant")
                                .HasColumnType("integer")
                                .HasColumnName("variant");

                            b1.Property<float>("AnimationSpeed")
                                .HasColumnType("real")
                                .HasColumnName("animation_animation_speed");

                            b1.Property<int>("FrameCount")
                                .HasColumnType("integer")
                                .HasColumnName("animation_frame_count");

                            b1.Property<float>("ScaleX")
                                .HasColumnType("real")
                                .HasColumnName("animation_scale_x");

                            b1.Property<float>("ScaleY")
                                .HasColumnType("real")
                                .HasColumnName("animation_scale_y");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("animation_url");

                            b1.HasKey("CharacterClassActionAssetCharacterClassId", "CharacterClassActionAssetActionType", "CharacterClassActionAssetVariant");

                            b1.ToTable("character_class_action_assets", "game");

                            b1.WithOwner()
                                .HasForeignKey("CharacterClassActionAssetCharacterClassId", "CharacterClassActionAssetActionType", "CharacterClassActionAssetVariant")
                                .HasConstraintName("fk_character_class_action_assets_character_class_action_assets");
                        });

                    b.Navigation("Animation")
                        .IsRequired();

                    b.Navigation("CharacterClass");
                });

            modelBuilder.Entity("Domain.Game.CharacterClasses.CharacterClassStat", b =>
                {
                    b.HasOne("Domain.Game.CharacterClasses.CharacterClass", "CharacterClass")
                        .WithMany("Stats")
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_character_class_stats_character_classes_character_class_id");

                    b.Navigation("CharacterClass");
                });

            modelBuilder.Entity("Domain.Game.Characters.Character", b =>
                {
                    b.HasOne("Domain.Game.CharacterClasses.CharacterClass", "Class")
                        .WithMany("Characters")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_characters_character_classes_class_id");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Domain.Game.Characters.CharacterCodes.CharacterCode", b =>
                {
                    b.HasOne("Domain.Game.Characters.Character", null)
                        .WithMany("Codes")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_character_codes_characters_character_id");
                });

            modelBuilder.Entity("Domain.Game.Enemies.EnemyActionAsset", b =>
                {
                    b.HasOne("Domain.Game.Enemies.Enemy", "Enemy")
                        .WithMany("ActionAssets")
                        .HasForeignKey("EnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enemy_action_assets_enemies_enemy_id");

                    b.OwnsOne("Domain.ValueObjects.SpriteAnimation", "Animation", b1 =>
                        {
                            b1.Property<Guid>("EnemyActionAssetEnemyId")
                                .HasColumnType("uuid")
                                .HasColumnName("enemy_id");

                            b1.Property<int>("EnemyActionAssetActionType")
                                .HasColumnType("integer")
                                .HasColumnName("action_type");

                            b1.Property<int>("EnemyActionAssetVariant")
                                .HasColumnType("integer")
                                .HasColumnName("variant");

                            b1.Property<float>("AnimationSpeed")
                                .HasColumnType("real")
                                .HasColumnName("animation_animation_speed");

                            b1.Property<int>("FrameCount")
                                .HasColumnType("integer")
                                .HasColumnName("animation_frame_count");

                            b1.Property<float>("ScaleX")
                                .HasColumnType("real")
                                .HasColumnName("animation_scale_x");

                            b1.Property<float>("ScaleY")
                                .HasColumnType("real")
                                .HasColumnName("animation_scale_y");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("animation_url");

                            b1.HasKey("EnemyActionAssetEnemyId", "EnemyActionAssetActionType", "EnemyActionAssetVariant");

                            b1.ToTable("enemy_action_assets", "game");

                            b1.WithOwner()
                                .HasForeignKey("EnemyActionAssetEnemyId", "EnemyActionAssetActionType", "EnemyActionAssetVariant")
                                .HasConstraintName("fk_enemy_action_assets_enemy_action_assets_enemy_id_action_typ");
                        });

                    b.Navigation("Animation")
                        .IsRequired();

                    b.Navigation("Enemy");
                });

            modelBuilder.Entity("Domain.Game.Enemies.EnemyStat", b =>
                {
                    b.HasOne("Domain.Game.Enemies.Enemy", "Enemy")
                        .WithMany("Stats")
                        .HasForeignKey("EnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enemy_stats_enemies_enemy_id");

                    b.Navigation("Enemy");
                });

            modelBuilder.Entity("Domain.Game.Arenas.Arena", b =>
                {
                    b.Navigation("Enemies");
                });

            modelBuilder.Entity("Domain.Game.CharacterClasses.CharacterClass", b =>
                {
                    b.Navigation("ActionAssets");

                    b.Navigation("Characters");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("Domain.Game.Characters.Character", b =>
                {
                    b.Navigation("Codes");
                });

            modelBuilder.Entity("Domain.Game.Enemies.Enemy", b =>
                {
                    b.Navigation("ActionAssets");

                    b.Navigation("Stats");
                });
#pragma warning restore 612, 618
        }
    }
}
